package edu.neu.ccs.cs5500.seattle.betterthanebay.resources;

import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

import edu.neu.ccs.cs5500.seattle.betterthanebay.Bid;
import edu.neu.ccs.cs5500.seattle.betterthanebay.Item;
import edu.neu.ccs.cs5500.seattle.betterthanebay.User;

@Path("/bids")
@Produces(MediaType.APPLICATION_JSON)
public class BidResource {
		
//	private BidDAO dao;
//	
//	public UserResource(BidDAO dao) {
//		super();
//		this.dao = dao;
//	}
	
	//all bids
	@GET
	public List<Bid> getBids() {
		
		return dao.getAllBids();
	}
	
	//bid by id
	@GET
	@Path("/{bidId}")
	public Bid getBid(@PathParam("bidId") long bidId) {
		
		return dao.getBid(bidId);
		
	}
	
	//bids by item
	@GET
	@Path("/items/{itemId}/bids")         ///remove path before class name?
	public List<Bid> getBids(Item item) {
		// if item == null or bid id does not exist ----
		long itemId = item.getId();
		if (id != null) { // && id exists --------
			return dao.getBids(item);
		}
	}
	
	//bids by user
	@GET
	@Path("/users/{userId}/bids")
	public List<Bid> getBids(User user) {
		// if user == null or user id does not exist ----
		
		long userId = user.getId();
		
		//if  id exists ------------------
		return bidDAO.getBids(user);		
	}
	
	// all bids by user for a specific item
	// "/users/{userId}/items/{itemId}/bids"
	
	@POST
	public Response addBid() {
		ResponseBuilder response;
		
	}
	
	@PUT
	@Path("/{bidId}")
	public Response updateBid() {
		ResponseBuilder response;
		
	}
	
	@DELETE
	@Path("/{bidId}")
	public Response deleteBid(@PathParam("bidId") long bidId) {
		ResponseBuilder response;
		
		// authenticate user
		// when can the user delete a bid
		
		Bid bid = dao.getBid(bidId);
		if (bid == null) { 
			response = Response.status(Response.Status.BAD_REQUEST); // invalid bid id	
		}
		
		boolean success = dao.deleteBid(bidId);
		if (success) {
			response = Response.status(Response.Status.OK);  // bid successfully deleted
		} else {
			response = Response.status(Response.Status.BAD_REQUEST); // failure
		}
		
		return response.build();
		
	}

}
